generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("login_attempts")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  stock         Int            @default(0)
  isActive      Boolean        @default(true)
  displayOrder  Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    OrderItem[]
  serialNumbers SerialNumber[]

  @@map("products")
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  customerName    String?
  customerEmail   String?
  customerAddress String?
  customerPhone   String?
  total           Float
  status          OrderStatus    @default("ORDER_RECEIVED")
  internalNotes   String?
  trackingNumber  String?
  repairQuote     String?
  isArchived      Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  items           OrderItem[]
  serialNumbers   SerialNumber[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model SerialNumber {
  id           String       @id @default(cuid())
  productId    String
  orderId      String?
  serialNumber String       @unique
  status       SerialStatus @default("AVAILABLE")
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  order        Order?       @relation(fields: [orderId], references: [id])
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("serial_numbers")
}

enum OrderStatus {
  ORDER_RECEIVED
  PAID_PENDING_SHIPMENT
  PAID
  CANCELLED
  RECEIVED
  QUOTE_SENT
  REPAIRING
  SHIPPED_AND_COMPLETE
}

enum SerialStatus {
  AVAILABLE
  SOLD
  RESERVED
  DEFECTIVE
  RETURNED
}
